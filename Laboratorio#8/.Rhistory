# Mostrar el mapa
mapa
# Cargar librerías necesarias
library(ggplot2)
# Crear los datos
data_pie <- data.frame(
Vehículo = c("Camiones", "Motocicletas", "Pickups"),
Servicios = c(62267, 5725, 195733)
)
# Calcular porcentajes
data_pie$Porcentaje <- round(data_pie$Servicios / sum(data_pie$Servicios) * 100, 2)
# Crear la gráfica de pastel
ggplot(data_pie, aes(x = "", y = Porcentaje, fill = Vehículo)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Distribución de Servicios por Tipo de Vehículo en 2017",
x = NULL, y = NULL, fill = "Vehículo") +
theme_void() +
geom_text(aes(label = paste0(Porcentaje, "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
# Crear los datos
cost_per_service <- data.frame(
Vehículo = c("Camiones", "Pickups", "Motocicletas"),
Costo_Directo = c(5499060, 12144675, 249872),
Servicios = c(62267, 195733, 5725)
)
# Calcular costo por servicio
cost_per_service$Costo_por_Servicio <- cost_per_service$Costo_Directo / cost_per_service$Servicios
# Crear la gráfica de barras
ggplot(cost_per_service, aes(x = Vehículo, y = Costo_por_Servicio, fill = Vehículo)) +
geom_bar(stat = "identity") +
labs(title = "Costo Directo por Servicio por Tipo de Vehículo",
x = "Vehículo", y = "Costo por Servicio (Q)") +
theme_minimal() +
scale_fill_manual(values = c("#0073C2FF", "#EFC000FF", "#868686FF")) +
geom_text(aes(label = paste0("Q", round(Costo_por_Servicio, 2))),
vjust = -0.5)
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES", "VISITA", "VISITA_POR_CORRECCION"),
Total_Servicios = c(31920, 47393, 2371, 16498)
)
# Calcular servicios aptos para motocicletas (50%)
data_services$Aptos_Moto <- data_services$Total_Servicios * 0.5
data_services$No_Aptos <- data_services$Total_Servicios - data_services$Aptos_Moto
# Reorganizar los datos para apilarlos
data_stack <- data.frame(
Servicio = rep(data_services$Servicio, each = 2),
Tipo = rep(c("Aptos para Moto", "No Aptos"), times = nrow(data_services)),
Cantidad = c(data_services$Aptos_Moto, data_services$No_Aptos)
)
# Crear la gráfica de barras apiladas
ggplot(data_stack, aes(x = Servicio, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
labs(title = "Servicios Aptos para Motocicletas",
x = "Tipo de Servicio", y = "Número de Servicios", fill = "") +
theme_minimal() +
scale_fill_manual(values = c("#00AFBB", "#FC4E07")) +
geom_text(aes(label = round(Cantidad)), position = position_stack(vjust = 0.5), color = "white")
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Total_Servicios = c(31920, 47393)
)
# Calcular servicios aptos para motocicletas (50%)
data_services$Aptos_Moto <- data_services$Total_Servicios * 0.5
data_services$No_Aptos <- data_services$Total_Servicios - data_services$Aptos_Moto
# Reorganizar los datos para apilarlos
data_stack <- data.frame(
Servicio = rep(data_services$Servicio, each = 2),
Tipo = rep(c("Aptos para Moto", "No Aptos"), times = nrow(data_services)),
Cantidad = c(data_services$Aptos_Moto, data_services$No_Aptos)
)
# Crear la gráfica de barras apiladas
ggplot(data_stack, aes(x = Servicio, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
labs(title = "Servicios Aptos para Motocicletas",
x = "Tipo de Servicio", y = "Número de Servicios", fill = "") +
theme_minimal() +
scale_fill_manual(values = c("#00AFBB", "#FC4E07")) +
geom_text(aes(label = round(Cantidad)), position = position_stack(vjust = 0.5), color = "white")
# Crear los datos
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES")
Total_Servicios = c(31920, 47393)
# Crear los datos
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Total_Servicios = c(31920, 47393)
)
# Calcular servicios aptos para motocicletas (50%)
data_services$Aptos_Moto <- data_services$Total_Servicios * 0.5
data_services$No_Aptos <- data_services$Total_Servicios - data_services$Aptos_Moto
# Reorganizar los datos para apilarlos
data_stack <- data.frame(
Servicio = rep(data_services$Servicio, each = 2),
Tipo = rep(c("Aptos para Moto", "No Aptos"), times = nrow(data_services)),
Cantidad = c(data_services$Aptos_Moto, data_services$No_Aptos)
)
# Crear la gráfica de barras apiladas
ggplot(data_stack, aes(x = Servicio, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
labs(title = "Servicios Aptos para Motocicletas",
x = "Tipo de Servicio", y = "Número de Servicios", fill = "") +
theme_minimal() +
scale_fill_manual(values = c("#00AFBB", "#FC4E07")) +
geom_text(aes(label = round(Cantidad)), position = position_stack(vjust = 0.5), color = "white")
library(ggplot2)
library(tidyr)
# Crear los datos
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Total_Servicios = c(31920, 47393)
)
# Calcular servicios aptos y no aptos para motocicletas (50%)
data_services$Aptos_para_Moto <- data_services$Total_Servicios * 0.5
data_services$No_Aptos <- data_services$Total_Servicios - data_services$Aptos_para_Moto
# Reorganizar los datos para formato largo
data_stack <- data_services %>%
select(Servicio, Aptos_para_Moto, No_Aptos) %>%
pivot_longer(cols = c("Aptos_para_Moto", "No_Aptos"), names_to = "Tipo", values_to = "Cantidad")
# Renombrar los valores de 'Tipo' para mejor legibilidad
data_stack$Tipo <- ifelse(data_stack$Tipo == "Aptos_para_Moto", "Aptos para Moto", "No Aptos")
# Crear la gráfica de barras apiladas
ggplot(data_stack, aes(x = Servicio, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
labs(title = "Servicios Aptos para Motocicletas",
x = "Servicio", y = "Número de Servicios", fill = "Tipo") +
theme_minimal() +
scale_fill_manual(values = c("#00AFBB", "#FC4E07")) +
geom_text(aes(label = round(Cantidad)),
position = position_stack(vjust = 0.5), color = "white")
# Instalar y cargar librerías necesarias
# install.packages("ggplot2")
# install.packages("tidyr")
library(ggplot2)
library(tidyr)
# Crear los datos
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Total_Servicios = c(31920, 47393)
)
# Calcular servicios aptos y no aptos para motocicletas (50%)
data_services$Aptos_para_Moto <- data_services$Total_Servicios * 0.25
data_services$No_Aptos <- data_services$Total_Servicios - data_services$Aptos_para_Moto
# Reorganizar los datos para formato largo
data_stack <- data_services %>%
select(Servicio, Aptos_para_Moto, No_Aptos) %>%
pivot_longer(cols = c("Aptos_para_Moto", "No_Aptos"), names_to = "Tipo", values_to = "Cantidad")
# Renombrar los valores de 'Tipo' para mejor legibilidad
data_stack$Tipo <- ifelse(data_stack$Tipo == "Aptos_para_Moto", "Aptos para Moto", "No Aptos")
# Crear la gráfica de barras apiladas
ggplot(data_stack, aes(x = Servicio, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
labs(title = "Servicios Aptos para Motocicletas",
x = "Servicio", y = "Número de Servicios", fill = "Tipo") +
theme_minimal() +
scale_fill_manual(values = c("#00AFBB", "#FC4E07")) +
geom_text(aes(label = round(Cantidad)),
position = position_stack(vjust = 0.5), color = "white")
# Crear los datos
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Total_Servicios = c(31920, 47393)
)
# Calcular servicios aptos y no aptos para motocicletas (50%)
data_services$Aptos_para_Moto <- data_services$Total_Servicios * 0.20
data_services$No_Aptos <- data_services$Total_Servicios - data_services$Aptos_para_Moto
# Reorganizar los datos para formato largo
data_stack <- data_services %>%
select(Servicio, Aptos_para_Moto, No_Aptos) %>%
pivot_longer(cols = c("Aptos_para_Moto", "No_Aptos"), names_to = "Tipo", values_to = "Cantidad")
# Renombrar los valores de 'Tipo' para mejor legibilidad
data_stack$Tipo <- ifelse(data_stack$Tipo == "Aptos_para_Moto", "Aptos para Moto", "No Aptos")
# Crear la gráfica de barras apiladas
ggplot(data_stack, aes(x = Servicio, y = Cantidad, fill = Tipo)) +
geom_bar(stat = "identity") +
labs(title = "Servicios Aptos para Motocicletas",
x = "Servicio", y = "Número de Servicios", fill = "Tipo") +
theme_minimal() +
scale_fill_manual(values = c("#00AFBB", "#FC4E07")) +
geom_text(aes(label = round(Cantidad)),
position = position_stack(vjust = 0.5), color = "white")
# Instalar y cargar librerías necesarias
# install.packages("ggplot2")
# install.packages("tidyr")
library(ggplot2)
library(tidyr)
# Crear los datos de servicios por tipo de vehículo (ajustados)
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Camiones = c(9665, 3504),
Pickups = c(16914, 33367),
Motocicletas = c(5341, 10522)
)
# Reorganizar los datos al formato largo
data_long <- data_services %>%
pivot_longer(cols = c("Camiones", "Pickups", "Motocicletas"), names_to = "Vehículo", values_to = "Cantidad")
# Crear la gráfica de barras apiladas
ggplot(data_long, aes(x = Servicio, y = Cantidad, fill = Vehículo)) +
geom_bar(stat = "identity") +
labs(title = "Distribución de Servicios por Tipo de Vehículo (Ajustada)",
x = "Servicio", y = "Número de Servicios", fill = "Vehículo") +
theme_minimal() +
scale_fill_manual(values = c("Camiones" = "#0073C2FF", "Pickups" = "#EFC000FF", "Motocicletas" = "#868686FF")) +
geom_text(aes(label = Cantidad), position = position_stack(vjust = 0.5), color = "white")
# Crear los datos
data_savings <- data.frame(
Concepto = "Ahorro Total Estimado",
Ahorro = 299092.00
)
# Crear la gráfica de barras
ggplot(data_savings, aes(x = Concepto, y = Ahorro, fill = Concepto)) +
geom_bar(stat = "identity") +
labs(title = "Ahorro Total Estimado por Reasignación a Motocicletas",
x = NULL, y = "Ahorro (Q)") +
theme_minimal() +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = "#00BA38") +
geom_text(aes(label = paste0("Q", format(Ahorro, big.mark = ","))), vjust = -0.5)
# Instalar y cargar librerías necesarias
# install.packages("ggplot2")
# install.packages("tidyr")
library(ggplot2)
library(tidyr)
# Crear los datos de servicios por tipo de vehículo (ajustados)
data_services <- data.frame(
Servicio = c("VERIFICACION_INDICADORES", "VERIFICACION_MEDIDORES"),
Camiones = c(9665, 3504),
Pickups = c(16914, 33367),
Motocicletas = c(5341, 10522)
)
# Reorganizar los datos al formato largo
data_long <- data_services %>%
pivot_longer(cols = c("Camiones", "Pickups", "Motocicletas"), names_to = "Vehículo", values_to = "Cantidad")
# Crear la gráfica de barras apiladas
ggplot(data_long, aes(x = Servicio, y = Cantidad, fill = Vehículo)) +
geom_bar(stat = "identity") +
labs(title = "Distribución de Servicios por Tipo de Vehículo",
x = "Servicio", y = "Número de Servicios", fill = "Vehículo") +
theme_minimal() +
scale_fill_manual(values = c("Camiones" = "#0073C2FF", "Pickups" = "#EFC000FF", "Motocicletas" = "#868686FF")) +
geom_text(aes(label = Cantidad), position = position_stack(vjust = 0.5), color = "white")
# Crear los datos
data_centers <- data.frame(
Centro = c("Centro #1", "Centro #2", "Centro #3", "Centro #4"),
Servicios = c(104823, 105535, 26948, 26419)
)
# Crear la gráfica de barras
ggplot(data_centers, aes(x = Centro, y = Servicios, fill = Centro)) +
geom_bar(stat = "identity") +
labs(title = "Número de Servicios Atendidos por Centro en 2017",
x = "Centro de Distribución", y = "Número de Servicios") +
theme_minimal() +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = Servicios), vjust = -0.5)
# Crear los datos
data_times <- data.frame(
Centro = rep(c("Centro #1", "Centro #2"), each = 5),
Tiempo = rep(c("5-30 min", "30-45 min", "45-75 min", "75-120 min", ">120 min"), 2),
Servicios = c(15817, 21076, 13759, 43830, 10341, 15765, 21195, 13750, 44150, 10675)
)
# Crear el histograma (gráfico de barras)
ggplot(data_times, aes(x = Tiempo, y = Servicios, fill = Centro)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribución de Tiempos de Desplazamiento en Centros #1 y #2",
x = "Tiempo de Desplazamiento", y = "Número de Servicios", fill = "Centro") +
theme_minimal() +
scale_fill_manual(values = c("#F8766D", "#00BFC4"))
# Servicios mayores a 75 minutos en Centros #1 y #2
servicios_mayores_75_c1 <- 43830 + 10341  # Centro #1
servicios_mayores_75_c2 <- 44150 + 10675  # Centro #2
# Total de servicios mayores a 75 minutos
total_servicios_mayores_75 <- servicios_mayores_75_c1 + servicios_mayores_75_c2
# Servicios a transferir (20%)
servicios_a_transferir <- total_servicios_mayores_75 * 0.20
# Dividir los servicios a transferir entre Centros #3 y #4
transferencia_por_centro <- servicios_a_transferir / 2
# Datos antes de la reasignación
data_before <- data.frame(
Centro = c("Centro #1", "Centro #2", "Centro #3", "Centro #4"),
Servicios = c(104823, 105535, 26948, 26419)
)
# Datos después de la reasignación
data_after <- data.frame(
Centro = c("Centro #1", "Centro #2", "Centro #3", "Centro #4"),
Servicios = c(
data_before$Servicios[1] - servicios_a_transferir / 2,
data_before$Servicios[2] - servicios_a_transferir / 2,
data_before$Servicios[3] + transferencia_por_centro,
data_before$Servicios[4] + transferencia_por_centro
)
)
# Combinar los datos
data_combined <- rbind(
data.frame(Centro = data_before$Centro, Servicios = data_before$Servicios, Estado = "Antes"),
data.frame(Centro = data_after$Centro, Servicios = data_after$Servicios, Estado = "Después")
)
# Crear la gráfica
ggplot(data_combined, aes(x = Centro, y = Servicios, fill = Estado)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Carga de Trabajo de los Centros Antes y Después de la Reasignación",
x = "Centro de Distribución", y = "Número de Servicios", fill = "Estado") +
theme_minimal() +
scale_fill_manual(values = c("#999999", "#E69F00")) +
geom_text(aes(label = round(Servicios)), position = position_dodge(width = 0.9), vjust = -0.5)
# Combinar los datos
data_combined <- rbind(
data.frame(Centro = data_before$Centro, Servicios = data_before$Servicios, Estado = "Antes"),
data.frame(Centro = data_after$Centro, Servicios = data_after$Servicios, Estado = "Después")
)
# Crear la gráfica
ggplot(data_combined, aes(x = Centro, y = Servicios, fill = Estado)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Carga de Trabajo de los Centros Antes y Después de la Reasignación",
x = "Centro de Distribución", y = "Número de Servicios", fill = "Estado") +
theme_minimal() +
scale_fill_manual(values = c("#672534", "#E69F00")) +
geom_text(aes(label = round(Servicios)), position = position_dodge(width = 0.9), vjust = -0.5)
# Crear los datos
months <- 1:12
savings_per_month <- 544975 / 12
data_savings <- data.frame(
Mes = months,
Ahorro_Acumulado = cumsum(rep(savings_per_month, 12))
)
# Crear la gráfica de líneas
ggplot(data_savings, aes(x = Mes, y = Ahorro_Acumulado)) +
geom_line(color = "#0073C2FF", size = 1) +
geom_point(color = "#EFC000FF", size = 2) +
labs(title = "Ahorro Acumulado en Costos Operativos por Reasignación",
x = "Mes", y = "Ahorro Acumulado (Q)") +
theme_minimal() +
scale_x_continuous(breaks = 1:12) +
geom_text(aes(label = paste0("Q", round(Ahorro_Acumulado))), vjust = -0.5)
# Crear los datos
data_margin <- data.frame(
Tipo_Servicio = c("CAMBIO_CORRECTIVO", "REVISION"),
Margen_Operativo_Total = c(1011009.00, 2652070.00),
Cantidad_Servicios = c(35869, 90288)
)
# Calcular margen operativo por servicio
data_margin$Margen_por_Servicio <- data_margin$Margen_Operativo_Total / data_margin$Cantidad_Servicios
# Crear la gráfica de barras
ggplot(data_margin, aes(x = Tipo_Servicio, y = Margen_por_Servicio, fill = Tipo_Servicio)) +
geom_bar(stat = "identity") +
labs(title = "Margen Operativo por Tipo de Servicio",
x = "Tipo de Servicio", y = "Margen Operativo por Servicio (Q)") +
theme_minimal() +
scale_fill_manual(values = c("#D55E00", "#009E73")) +
geom_text(aes(label = paste0("Q", round(Margen_por_Servicio, 2))),
vjust = -0.5)
# Crear los datos
data_margin <- data.frame(
Tipo_Servicio = c("CAMBIO_CORRECTIVO", "REVISION"),
Margen_Operativo_Total = c(1011009.00, 2652070.00),
Cantidad_Servicios = c(35869, 90288)
)
# Calcular margen operativo por servicio
data_margin$Margen_por_Servicio <- data_margin$Margen_Operativo_Total / data_margin$Cantidad_Servicios
# Crear la gráfica de barras
ggplot(data_margin, aes(x = Tipo_Servicio, y = Margen_por_Servicio, fill = Tipo_Servicio)) +
geom_bar(stat = "identity") +
labs(title = "Margen Operativo por Tipo de Servicio",
x = "Tipo de Servicio", y = "Margen Operativo por Servicio (Q)") +
theme_minimal() +
scale_fill_manual(values = c("#D55E00", "#009E73")) +
geom_text(aes(label = paste0("Q", round(Margen_por_Servicio, 2))),
vjust = -0.5)
# Crear los datos
data_services_change <- data.frame(
Tipo_Servicio = c("Servicios Preventivos", "Servicios Correctivos"),
Cambio_en_Servicios = c(13543, -6738)
)
# Crear la gráfica de barras
ggplot(data_services_change, aes(x = Tipo_Servicio, y = Cambio_en_Servicios, fill = Tipo_Servicio)) +
geom_bar(stat = "identity") +
labs(title = "Cambio Proyectado en el Número de Servicios",
x = "Tipo de Servicio", y = "Cambio en Servicios") +
theme_minimal() +
scale_fill_manual(values = c("#56B4E9", "#CC79A7")) +
geom_text(aes(label = Cambio_en_Servicios), vjust = ifelse(data_services_change$Cambio_en_Servicios >= 0, -0.5, 1.5))
# Datos antes
data_pie_before <- data.frame(
Tipo_Servicio = c("Preventivos", "Correctivos"),
Servicios = c(90288, 35869)
)
data_pie_before$Porcentaje <- round(data_pie_before$Servicios / sum(data_pie_before$Servicios) * 100, 2)
# Gráfica de pastel antes
ggplot(data_pie_before, aes(x = "", y = Porcentaje, fill = Tipo_Servicio)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Distribución de Servicios Antes",
x = NULL, y = NULL, fill = "Tipo de Servicio") +
theme_void() +
geom_text(aes(label = paste0(Porcentaje, "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("#0072B2", "#D55E00"))
# Instalar paquetes necesarios si no están instalados
# install.packages("ggplot2")
# install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
# Datos antes
data_pie_before <- data.frame(
Tipo_Servicio = c("Preventivos", "Correctivos"),
Servicios = c(90288, 35869)
)
data_pie_before$Porcentaje <- round(data_pie_before$Servicios / sum(data_pie_before$Servicios) * 100, 2)
# Gráfica de pastel antes
plot_before <- ggplot(data_pie_before, aes(x = "", y = Porcentaje, fill = Tipo_Servicio)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Distribución de Servicios Antes",
x = NULL, y = NULL, fill = "Tipo de Servicio") +
theme_void() +
geom_text(aes(label = paste0(Porcentaje, "%")),
position = position_stack(vjust = 0.5), size = 5) +
scale_fill_manual(values = c("#0072B2", "#D55E00"))
# Datos después
data_pie_after <- data.frame(
Tipo_Servicio = c("Preventivos", "Correctivos"),
Servicios = c(103831, 29131)
)
data_pie_after$Porcentaje <- round(data_pie_after$Servicios / sum(data_pie_after$Servicios) * 100, 2)
# Gráfica de pastel después
plot_after <- ggplot(data_pie_after, aes(x = "", y = Porcentaje, fill = Tipo_Servicio)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +
labs(title = "Distribución de Servicios Después",
x = NULL, y = NULL, fill = "Tipo de Servicio") +
theme_void() +
geom_text(aes(label = paste0(Porcentaje, "%")),
position = position_stack(vjust = 0.5), size = 5) +
scale_fill_manual(values = c("#0072B2", "#D55E00"))
# Colocar las dos gráficas juntas
grid.arrange(plot_before, plot_after, ncol = 2)
# Instalar y cargar librerías necesarias si no están instaladas
# install.packages("ggplot2")
library(ggplot2)
# Crear los datos antes y después
data_before <- data.frame(
Tipo_Servicio = c("Preventivos", "Correctivos"),
Estado = "Antes",
Servicios = c(90288, 35869)
)
data_after <- data.frame(
Tipo_Servicio = c("Preventivos", "Correctivos"),
Estado = "Después",
Servicios = c(103831, 29131)
)
# Combinar los datos en un solo dataframe
data_combined <- rbind(data_before, data_after)
# Verificar la estructura del dataframe combinado
print(data_combined)
# Crear la gráfica de barras agrupadas
ggplot(data_combined, aes(x = Tipo_Servicio, y = Servicios, fill = Estado)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
labs(title = "Distribución de Servicios: Antes vs Después",
x = "Tipo de Servicio",
y = "Número de Servicios",
fill = "Estado") +
theme_minimal() +
scale_fill_manual(values = c("Antes" = "#0072B2", "Después" = "#D55E00")) +
geom_text(aes(label = Servicios),
position = position_dodge(width = 0.8),
vjust = -0.5,
size = 4) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
) +
ylim(0, max(data_combined$Servicios) * 1.1)  # Ajustar el límite y para las etiquetas
# Servicios mayores a 75 minutos en Centros #1 y #2
servicios_mayores_75_c1 <- 43830 + 10341  # Centro #1
servicios_mayores_75_c2 <- 44150 + 10675  # Centro #2
# Total de servicios mayores a 75 minutos
total_servicios_mayores_75 <- servicios_mayores_75_c1 + servicios_mayores_75_c2
# Servicios a transferir (20%)
servicios_a_transferir <- total_servicios_mayores_75 * 0.20
# Dividir los servicios a transferir entre Centros #3 y #4
transferencia_por_centro <- servicios_a_transferir / 2
# Datos antes de la reasignación
data_before <- data.frame(
Centro = c("Centro #1", "Centro #2", "Centro #3", "Centro #4"),
Servicios = c(104823, 105535, 26948, 26419)
)
# Datos después de la reasignación
data_after <- data.frame(
Centro = c("Centro #1", "Centro #2", "Centro #3", "Centro #4"),
Servicios = c(
data_before$Servicios[1] - servicios_a_transferir / 2,
data_before$Servicios[2] - servicios_a_transferir / 2,
data_before$Servicios[3] + transferencia_por_centro,
data_before$Servicios[4] + transferencia_por_centro
)
)
# Combinar los datos
data_combined <- rbind(
data.frame(Centro = data_before$Centro, Servicios = data_before$Servicios, Estado = "Antes"),
data.frame(Centro = data_after$Centro, Servicios = data_after$Servicios, Estado = "Después")
)
# Crear la gráfica
ggplot(data_combined, aes(x = Centro, y = Servicios, fill = Estado)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Carga de Trabajo de los Centros Antes y Después de la Reasignación",
x = "Centro de Distribución", y = "Número de Servicios", fill = "Estado") +
theme_minimal() +
scale_fill_manual(values = c("#672534", "#E69F00")) +
geom_text(aes(label = round(Servicios)), position = position_dodge(width = 0.9), vjust = -0.5)
