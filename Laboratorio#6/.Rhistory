knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 1)
setwd("~/Library/Containers/net.whatsapp.WhatsApp/Data/tmp/documents/83FC5BD9-5EA0-46F2-B7CE-960A3BCFD3A4")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 1)
View(datos)
summary(aov(NOTA~TECNICA, data = datos) )
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 1)
View(datos)
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 2)
View(datos)
summary(aov(NOTA~TECNICA, data = datos) )
library(BSDA)
SIGN.test(datos$`Aditivo regular`, datos$`Nuevo aditivo`, alternative = "greater")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 1)
View(datos)
View(datos)
summary(aov(NOTA~TECNICA, data = datos) )
summary(aov(NOTA~TECNICA, data = datos) )
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 1)
View(datos)
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 1)
View(datos)
summary(aov(NOTA~TECNICA, data = datos) )
library(readxl)
library(summarytools)
datos <- read_excel("Repaso P2.xlsx", sheet = 2)
View(datos)
library(BSDA)
SIGN.test(datos$`Aditivo regular`, datos$`Nuevo aditivo`, alternative = "greater")
wilcox.test(datos$`Aditivo regular`, datos$`Nuevo aditivo`, paired = T, exact = T, alternative = "greater" )
t.test(datos$`Aditivo regular`, datos$`Nuevo aditivo`, paired = F, alternative = "greater")
shapiro.test(datos$`Nuevo aditivo`)
shapiro.test(datos$`Aditivo regular`)
shapiro.test(datos$`Nuevo aditivo`)
library(summarytools)
descr(datos)
t.test(datos$`Aditivo regular`, datos$`Nuevo aditivo`, paired = T, alternative = "greater")
setwd("~/Documents/GitHub/Data-Wrangling/Laboratorio#6")
knitr::opts_chunk$set(echo = TRUE)
##cargar librerias
library(nycflights13)
library(lubridate)
library(dplyr)
# Cargar el dataset de vuelos
flights <- nycflights13::flights
# Crear una función para convertir la hora en formato HHMM a datetime
convert_to_datetime <- function(year, month, day, time) {
hours <- time %/% 100 # División entera para obtener las horas
minutes <- time %% 100 # Resto para obtener los minutos
make_datetime(year, month, day, hours, minutes)
}
# Aplicar la función a las columnas dep_time y arr_time
flights <- flights %>%
mutate(
dep_datetime = convert_to_datetime(year, month, day, dep_time),
arr_datetime = convert_to_datetime(year, month, day, arr_time)
)
# Mostrar las primeras filas para verificar la conversión
head(flights[, c("dep_time", "dep_datetime", "arr_time", "arr_datetime")])
View(flights)
View(flights)
View(datos)
# Calcular el tiempo de vuelo en minutos
flights <- flights %>%
mutate(
flight_duration = as.numeric(difftime(arr_datetime, dep_datetime, units = "mins"))
)
# Mostrar las primeras filas para verificar la duración del vuelo
head(flights[, c("dep_datetime", "arr_datetime", "flight_duration")])
# Extraer el día de la semana y la hora de salida
flights <- flights %>%
mutate(
dep_day_of_week = wday(dep_datetime, label = TRUE, abbr = TRUE), # Día de la semana
dep_hour = hour(dep_datetime) # Hora de salida
)
# Mostrar las primeras filas para verificar las nuevas variables
head(flights[, c("dep_datetime", "dep_day_of_week", "dep_hour")])
# Crear nuevas columnas para el día de la semana y la semana del año
flights <- flights %>%
mutate(
day_of_week = wday(time_hour, label = TRUE, abbr = TRUE),  # Día de la semana
week_of_year = week(time_hour)  # Semana del año
)
# Mostrar las primeras filas para verificar las nuevas columnas
head(flights[, c("time_hour", "day_of_week", "week_of_year")])
View(flights)
# Filtrar vuelos que salieron en fin de semana
weekend_flights <- flights %>%
filter(day_of_week %in% c("Sat", "Sun"))
# Contar el total de vuelos en fines de semana
total_weekend_flights <- nrow(weekend_flights)
# Mostrar el total de vuelos en fines de semana
total_weekend_flights
