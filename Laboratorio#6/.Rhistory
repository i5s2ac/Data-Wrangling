"Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx",
"Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx"
)
# Use the function with the start date "2023-01"
combined_data <- unify_data(file_paths, "2023-01")
library(readxl)
X01_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx")
X02_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx")
X03_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx")
X04_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx")
X05_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx")
X06_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx")
X07_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx")
X08_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx")
X09_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx")
X10_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx")
X11_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx")
unified_data <- function(x){
}
dataset_unificado <-
<- read_excel("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx") %>% mutate(date = "03-2023")
library(readxl)
library(dplyr)
# Leer los archivos de Excel y agregar la columna de fecha
X01_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx") %>% mutate(date = "01-2023")
X02_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx") %>% mutate(date = "02-2023")
X03_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx") %>% mutate(date = "03-2023")
X04_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx") %>% mutate(date = "04-2023")
X05_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx") %>% mutate(date = "05-2023")
X06_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx") %>% mutate(date = "06-2023")
X07_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx") %>% mutate(date = "07-2023")
X08_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx") %>% mutate(date = "08-2023")
X09_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx") %>% mutate(date = "09-2023")
X10_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx") %>% mutate(date = "10-2023")
X11_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx") %>% mutate(date = "11-2023")
View(X01_2023)
library(readxl)
library(dplyr)
# Leer los archivos de Excel y agregar la columna de fecha
X01_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx") %>% mutate(Fecha = "01-2023")
X02_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx") %>% mutate(Fecha = "02-2023")
X03_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx") %>% mutate(Fecha = "03-2023")
X04_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx") %>% mutate(Fecha = "04-2023")
X05_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx") %>% mutate(Fecha = "05-2023")
X06_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx") %>% mutate(Fecha = "06-2023")
X07_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx") %>% mutate(Fecha = "07-2023")
X08_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx") %>% mutate(Fecha = "08-2023")
X09_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx") %>% mutate(Fecha = "09-2023")
X10_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx") %>% mutate(Fecha = "10-2023")
X11_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx") %>% mutate(Fecha = "11-2023")
View(X02_2023)
library(readxl)
library(dplyr)
# Leer los archivos de Excel y agregar la columna de fecha
library(readxl)
library(dplyr)
# Leer archivos y agregar la columna FECHA en formato "MM-YYYY"
X01_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx") %>%
mutate(FECHA = as.Date(paste0("01-", "2023"), format = "%m-%Y"))
X02_2023 <- read_excel("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx") %>%
mutate(FECHA = as.Date(paste0("01-", "2023"), format = "%m-%Y") + months(1))
library(readxl)
library(dplyr)
library(lubridate) # Para manejar fechas más fácilmente
# Crear una función para agregar la columna FECHA
add_monthly_date <- function(file_path, base_date, months_to_add) {
data <- read_excel(file_path)
# Incrementar la fecha base en los meses correspondientes
date_value <- seq.Date(base_date, by = "month", length.out = 1) + months(months_to_add - 1)
data <- data %>% mutate(FECHA = date_value)
return(data)
}
# Fecha base (primer día del primer mes)
base_date <- as.Date("2023-01-01")
# Leer archivos y agregar la columna FECHA con la fecha adecuada
X01_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx", base_date, 1)
X02_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx", base_date, 2)
X03_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx", base_date, 3)
X04_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx", base_date, 4)
X05_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx", base_date, 5)
X06_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx", base_date, 6)
X07_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx", base_date, 7)
X08_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx", base_date, 8)
X09_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx", base_date, 9)
X10_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx", base_date, 10)
X11_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx", base_date, 11)
# Combinar todos los dataframes en uno solo
combined_data <- bind_rows(X01_2023, X02_2023, X03_2023, X04_2023, X05_2023, X06_2023, X07_2023, X08_2023, X09_2023, X10_2023, X11_2023)
# Ver el dataframe combinado
print(combined_data)
View(combined_data)
View(X01_2023)
View(combined_data)
View(X05_2023)
View(X06_2023)
View(X07_2023)
View(combined_data)
combined_data <- cbind(X01_2023, X02_2023, X03_2023, X04_2023, X05_2023, X06_2023, X07_2023, X08_2023, X09_2023, X10_2023, X11_2023)
library(readxl)
library(dplyr)
library(lubridate) # Para manejar fechas más fácilmente
# Crear una función para agregar la columna FECHA
add_monthly_date <- function(file_path, base_date, months_to_add) {
data <- read_excel(file_path)
# Incrementar la fecha base en los meses correspondientes
date_value <- seq.Date(base_date, by = "month", length.out = 1) + months(months_to_add - 1)
data <- data %>% mutate(FECHA = date_value)
return(data)
}
# Fecha base (primer día del primer mes)
base_date <- as.Date("2023-01-01")
# Leer archivos y agregar la columna FECHA con la fecha adecuada
X01_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx", base_date, 1)
X02_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx", base_date, 2)
X03_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx", base_date, 3)
X04_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx", base_date, 4)
X05_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx", base_date, 5)
X06_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx", base_date, 6)
X07_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx", base_date, 7)
X08_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx", base_date, 8)
X09_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx", base_date, 9)
X10_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx", base_date, 10)
X11_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx", base_date, 11)
# Combinar todos los dataframes en uno solo
combined_data <- cbind(X01_2023, X02_2023, X03_2023, X04_2023, X05_2023, X06_2023, X07_2023, X08_2023, X09_2023, X10_2023, X11_2023)
library(readxl)
library(dplyr)
library(lubridate) # Para manejar fechas más fácilmente
# Crear una función para agregar la columna FECHA
add_monthly_date <- function(file_path, base_date, months_to_add) {
data <- read_excel(file_path)
# Incrementar la fecha base en los meses correspondientes
date_value <- seq.Date(base_date, by = "month", length.out = 1) + months(months_to_add - 1)
data <- data %>% mutate(FECHA = date_value)
return(data)
}
# Fecha base (primer día del primer mes)
base_date <- as.Date("2023-01-01")
# Leer archivos y agregar la columna FECHA con la fecha adecuada
X01_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx", base_date, 1)
X02_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx", base_date, 2)
X03_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx", base_date, 3)
X04_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx", base_date, 4)
X05_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx", base_date, 5)
X06_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx", base_date, 6)
X07_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx", base_date, 7)
X08_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx", base_date, 8)
X09_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx", base_date, 9)
X10_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx", base_date, 10)
X11_2023 <- add_monthly_date("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx", base_date, 11)
# Combinar todos los dataframes en uno solo
combined_data <- bind_rows(X01_2023, X02_2023, X03_2023, X04_2023, X05_2023, X06_2023, X07_2023, X08_2023, X09_2023, X10_2023, X11_2023)
combined_data <- combined_data[-2]
# Ver el dataframe combinado
print(combined_data)
View(combined_data)
library(readxl)
library(dplyr)
library(lubridate) # Para manejar fechas más fácilmente
# Crear una función para agregar la columna FECHA y seleccionar las columnas deseadas
process_file <- function(file_path, base_date, months_to_add) {
data <- read_excel(file_path)
# Incrementar la fecha base en los meses correspondientes
date_value <- seq.Date(base_date, by = "month", length.out = 1) + months(months_to_add - 1)
data <- data %>%
mutate(FECHA = date_value) %>%
select(COD_VIAJE, CLIENTE, UBICACIÓN, CANTIDAD, PILOTO, Q, CREDITO, UNIDAD, FECHA)
return(data)
}
# Fecha base (primer día del primer mes)
base_date <- as.Date("2023-01-01")
# Leer archivos, agregar la columna FECHA y seleccionar las columnas deseadas
X01_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx", base_date, 1)
library(readxl)
library(dplyr)
library(lubridate) # Para manejar fechas más fácilmente
# Crear una función para agregar la columna FECHA y seleccionar las columnas deseadas
process_file <- function(file_path, base_date, months_to_add) {
data <- read_excel(file_path)
# Incrementar la fecha base en los meses correspondientes
date_value <- seq.Date(base_date, by = "month", length.out = 1) + months(months_to_add - 1)
data <- data %>%
mutate(FECHA = date_value) %>%
select(COD_VIAJE, CLIENTE, UBICACION, CANTIDAD, PILOTO, Q, CREDITO, UNIDAD, FECHA)
return(data)
}
# Fecha base (primer día del primer mes)
base_date <- as.Date("2023-01-01")
# Leer archivos, agregar la columna FECHA y seleccionar las columnas deseadas
X01_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/01-2023.xlsx", base_date, 1)
X02_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/02-2023.xlsx", base_date, 2)
X03_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/03-2023.xlsx", base_date, 3)
X04_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/04-2023.xlsx", base_date, 4)
X05_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/05-2023.xlsx", base_date, 5)
X06_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/06-2023.xlsx", base_date, 6)
X07_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/07-2023.xlsx", base_date, 7)
X08_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/08-2023.xlsx", base_date, 8)
X09_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/09-2023.xlsx", base_date, 9)
X10_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/10-2023.xlsx", base_date, 10)
X11_2023 <- process_file("Desktop/Data Wrangling/Laboratorio#1/11-2023.xlsx", base_date, 11)
# Combinar todos los dataframes en uno solo
combined_data <- bind_rows(X01_2023, X02_2023, X03_2023, X04_2023, X05_2023, X06_2023, X07_2023, X08_2023, X09_2023, X10_2023, X11_2023)
# Ver el dataframe combinado
print(combined_data)
View(combined_data)
write.xlsx(combined_data, "combined_data.xlsx")
library(openxlsx)
write.xlsx(combined_data, "combined_data.xlsx")
# Datos de ejemplo
colesterol_antes <- c(200, 220, 210, 215, 225)  # Niveles de colesterol antes del tratamiento
colesterol_despues <- c(180, 210, 190, 200, 205)  # Niveles de colesterol después del tratamiento
# Calcular la diferencia
diferencias <- colesterol_antes - colesterol_despues
# Realizar la prueba t para muestras pareadas
t_test_result <- t.test(diferencias, alternative = "less")
# Mostrar el resultado de la prueba t
t_test_result
# Calcular la proporción de pacientes que redujeron su colesterol
n_reduccion <- sum(diferencias > 0)
proporcion_reduccion <- n_reduccion / length(diferencias)
# Mostrar la proporción
proporcion_reduccion
# Datos proporcionados
colesterol_antes <- c(199, 205, 209, 211, 190, 206, 209, 200, 212, 210, 221, 187, 204, 186, 199, 196, 207, 198, 204, 184, 200, 203, 191, 200, 209, 206, 192, 200, 199, 201)
colesterol_despues <- c(195, 185, 197, 200, 182, 198, 198, 194, 180, 177, 186, 188, 203, 188, 199, 197, 186, 198, 189, 191, 194, 202, 192, 197, 191, 189, 185, 196, 194, 187)
# Calcular la diferencia
diferencias <- colesterol_antes - colesterol_despues
# Realizar la prueba t para muestras pareadas
t_test_result <- t.test(diferencias, alternative = "less")
# Mostrar el resultado de la prueba t
print(t_test_result)
# Calcular la proporción de pacientes que redujeron su colesterol
n_reduccion <- sum(diferencias > 0)
proporcion_reduccion <- n_reduccion / length(diferencias)
# Mostrar la proporción
print(proporcion_reduccion)
print(t_test_result)
# Datos proporcionados
colesterol_antes <- c(199, 205, 209, 211, 190, 206, 209, 200, 212, 210, 221, 187, 204, 186, 199, 196, 207, 198, 204, 184, 200, 203, 191, 200, 209, 206, 192, 200, 199, 201)
colesterol_despues <- c(195, 185, 197, 200, 182, 198, 198, 194, 180, 177, 186, 188, 203, 188, 199, 197, 186, 198, 189, 191, 194, 202, 192, 197, 191, 189, 185, 196, 194, 187)
# Calcular la diferencia
diferencias <- colesterol_antes - colesterol_despues
# Realizar la prueba t para muestras pareadas
t_test_result <- t.test(diferencias, alternative = "less")
# Mostrar el resultado de la prueba t
print(t_test_result)
# Calcular la proporción de pacientes que redujeron su colesterol
n_reduccion <- sum(diferencias > 0)
proporcion_reduccion <- n_reduccion / length(diferencias)
# Mostrar la proporción
print(proporcion_reduccion)
# Datos
p_A <- 0.90
p_B <- 0.85
n_A <- 50
n_B <- 45
# Éxitos en cada grupo
x_A <- p_A * n_A
x_B <- p_B * n_B
# Proporción combinada
p_comb <- (x_A + x_B) / (n_A + n_B)
# Cálculo del estadístico z
z <- (p_A - p_B) / sqrt(p_comb * (1 - p_comb) * (1/n_A + 1/n_B))
# p-valor
p_value <- 1 - pnorm(z)
# Resultados
z
p_value
### Problema 2
# Datos
p_A <- 0.90
p_B <- 0.85
n_A <- 50
n_B <- 45
# Éxitos en cada grupo
x_A <- p_A * n_A
x_B <- p_B * n_B
# Proporción combinada
p_comb <- (x_A + x_B) / (n_A + n_B)
# Cálculo del estadístico z
z <- (p_A - p_B) / sqrt(p_comb * (1 - p_comb) * (1/n_A + 1/n_B))
# p-valor
p_value <- 1 - pnorm(z)
# Resultados
z
p_value
≈# Datos
# Datos
p_A <- 0.90
p_B <- 0.85
n_A <- 50
n_B <- 45
# Éxitos en cada grupo
x_A <- p_A * n_A
x_B <- p_B * n_B
# Proporción combinada
p_comb <- (x_A + x_B) / (n_A + n_B)
# Cálculo del estadístico z
z <- (p_A - p_B) / sqrt(p_comb * (1 - p_comb) * (1/n_A + 1/n_B))
# p-valor
p_value <- 1 - pnorm(z)
# Intervalo de confianza para la diferencia de proporciones
conf_level <- 0.95
se_diff <- sqrt(p_comb * (1 - p_comb) * (1/n_A + 1/n_B))
margin_error <- qnorm(conf_level + (1 - conf_level) / 2) * se_diff
lower_bound <- (p_A - p_B) - margin_error
upper_bound <- (p_A - p_B) + margin_error
# Resultados
z
p_value
c(lower_bound, upper_bound)
# Problema 3
# Datos de tiempo de secado para la pintura Marca A
marca_A <- c(4.6, 6.1, 2.8, 3.8, 3.1, 3.7, 6.1, 4.7, 4.2, 4.0, 5.1, 6.6, 6.0, 3.3, 4.1)
# Datos de tiempo de secado para la pintura Marca B
marca_B <- c(3.4, 2.5, 4.8, 2.9, 3.6, 2.8, 3.3, 5.6, 3.7, 2.8, 4.4, 4.0, 5.2, 3.0, 4.8)
# Realizar la prueba t para muestras independientes
t_test_result <- t.test(marca_A, marca_B, alternative = "greater", var.equal = FALSE)
# Mostrar el resultado de la prueba t
print(t_test_result)
# Problema 4
# Datos de ejemplo
diametros <- c(10.05, 9.98, 10.10, 9.95, 10.02, 9.99, 10.04, 10.01, 9.96, 10.08)
# Prueba t para la media
t_test_result <- t.test(diametros, mu = 10)
# Mostrar resultados
print(t_test_result)
# Problema 4
# Datos de ejemplo
diametros <- c(10.05, 9.98, 10.10, 9.95, 10.02, 9.99, 10.04, 10.01, 9.96, 10.08)
# Prueba t para la media
t_test_result <- t.test(diametros, mu = 10)
# Mostrar resultados
print(t_test_result)
# ---- Cargar Librerias ----
library(tidyverse)
library(ggplot2)
library(openxlsx)
#install.packages("scorecard")
library(scorecard)
# ---- Cargar Data Set German Credit ----
df <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data")
colnames(df) <- c("chk_acct", "duration", "credit_his", "purpose",
"amount", "saving_acct", "present_emp", "installment_rate", "sex", "other_debtor",
"present_resid", "property", "age", "other_install", "housing", "n_credits",
"job", "n_people", "telephone", "foreign", "response")
df$response[df$response==2] <- 0
df %>% summary()
# ---- Tablas de Frecuencia por Edad ----
df.age <- df %>% select(age, response) %>%
group_by(age) %>% summarise(
total_credit = n(),
bad_credit = sum(response),
bad_rate = mean(response)
)
df.age %>% View()
# ---- Graficando La Edad por la Tasa de Malos ----
## Graficando el bad rate
ggplot(df.age, aes(x = age, y = bad_rate)) +
geom_line() +
labs(title = "Tasa de Malos por Edad",
x = "Edad",
y = "Tasa de Malos") +
theme_minimal()
## Graficando el bad rate y la frecuencia de créditos
ggplot(df.age, aes(x = age)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de la Variable Age",
x = "Edad") +
theme_minimal()
# ---- Binning con Dplyr ----
df.age_bin <- df %>% select(age, response) %>%
mutate(age_bin = ntile(age, 5)) %>%
group_by(age_bin) %>% summarise(
bad_credit = sum(response),
good_credit = sum(1 - response),
total_credit = n(),
bad_rate = bad_credit / total_credit,
min_age = min(age),
max_age = max(age)
)
df.age_bin
ggplot(df.age_bin, aes(x = age_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de los Bines de la Variable Age",
x = "Bines de Edad") +
theme_minimal()
# ---- Calculando el WoE y el Information Value con Dplyr ----
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit / sum(good_credit),
pct_bad = bad_credit / sum(bad_credit),
woe = log(pct_good / pct_bad),
iv_bin = (pct_good - pct_bad) * woe,
iv_var = sum(iv_bin)
)
df.age_bin_woe
# ---- Binning con paquete Scorecard ----
bins <- woebin(df, y = "response", x = c("age"))
bins$age
df_binned <- woebin_ply(df, bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[1]]
# ---- Ejercicio - binning con dplyr y la variable amount ----
df.amount_bin <- df %>% select(amount, response) %>%
mutate(amount_bin = ntile(amount, 5)) %>%
group_by(amount_bin) %>% summarise(
bad_credit = sum(response),
good_credit = sum(1 - response),
total_credit = n(),
bad_rate = bad_credit / total_credit
)
df.amount_bin
ggplot(df.amount_bin, aes(x = amount_bin, y = bad_rate)) +
geom_line() +
labs(title = "Tasa de Malos por los bines de Amount",
x = "Amount bin",
y = "Bad Rate") +
theme_minimal()
ggplot(df.amount_bin, aes(x = amount_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.amount_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos por los bines de Amount",
x = "Bines de Amount") +
theme_minimal()
# ---- Mismo ejercicio con amount con el paquete Scorecard ----
bins <- woebin(df, y = "response", x = c("age", "n_credits", "amount"))
bins$amount
df_binned <- woebin_ply(df, bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[3]]
# ---- Calculando el WoE y el Information Value con Dplyr ----
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit / sum(good_credit),
pct_bad = bad_credit / sum(bad_credit),
woe = log(pct_good / pct_bad),
iv_bin = (pct_good - pct_bad) * woe,
iv_var = sum(iv_bin)
)
df.age_bin_woe
# ---- Calculando el WoE y el Information Value con Dplyr ----
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit / sum(good_credit),
pct_bad = bad_credit / sum(bad_credit),
woe = log(pct_good / pct_bad),
iv_bin = (pct_good - pct_bad) * woe,
iv_var = sum(iv_bin)
)
df.age_bin_woe
# ---- Binning con paquete Scorecard ----
bins <- woebin(df, y = "response", x = c("age"))
bins$age
df_binned <- woebin_ply(df, bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[1]]
View(df.age_bin_woe)
View(df_binned)
View(df.amount_bin)
shiny::runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
shiny::runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
runApp('Desktop/Data Producto/Laboratorio #2/Lab2_Shiny_Web_App')
setwd("~/Documents/GitHub/Data-Wrangling")
setwd("~/Documents/GitHub/Data-Wrangling/Laboratorio#6")
